{"version":3,"file":"static/js/115.a11d7c39.chunk.js","mappings":"kOAsCA,UAlCa,WACX,OAA4BA,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,SAERE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAW,mCAAG,qGACCC,EAAAA,EAAAA,IAAUJ,GADX,OACZK,EADY,OAElBN,GAAU,OAAIM,EAAKC,MAAM,EAAG,MAFV,2CAAH,qDAIjBH,GACD,GAAE,CAACH,IAIJ,OACE,wBACGF,GACCA,EAAOS,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,GAAIC,EAAoC,EAApCA,UAAWC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,aACjC,OACE,2BACE,gBACEC,MAAO,CAAEC,MAAO,SAChBC,IAAG,UAVH,mCAUG,OAAaH,GAChBI,IAAI,MAEN,mCAAWL,MACX,uCAAeD,OAPRD,EAUZ,KAGR,C,sLCpCKQ,EAAW,gCACXC,EAAU,mCAGHC,EAAa,mCAAG,sGACNC,MAAM,GAAD,OAAIH,GAAJ,OAHX,qBAGW,oBAAmCC,IADlC,cACrBG,EADqB,gBAETA,EAAOC,OAFE,cAErBC,EAFqB,yBAGpBA,EAAIC,SAHgB,2CAAH,qDAMbC,EAAY,mCAAG,WAAMxB,GAAN,yFACLmB,MAAM,GAAD,OAAIH,EAAJ,iBAAqBhB,EAArB,oBAAwCiB,IADxC,cACpBG,EADoB,gBAEHA,EAAOC,OAFJ,cAEpBI,EAFoB,yBAGnBA,GAHmB,2CAAH,sDAMZC,EAAW,mCAAG,WAAMC,GAAN,yFACJR,MAAM,GAAD,OACrBH,EADqB,gCACWC,EADX,kBAC4BU,IAF7B,cACnBP,EADmB,gBAIFA,EAAOC,OAJL,cAInBI,EAJmB,yBAKlBA,EAASF,SALS,2CAAH,sDAQXnB,EAAS,mCAAG,WAAMJ,GAAN,yFACFmB,MAAM,GAAD,OACrBH,EADqB,iBACJhB,EADI,4BACuBiB,IAF1B,cACjBG,EADiB,gBAIAA,EAAOC,OAJP,cAIjBI,EAJiB,yBAKhBA,EAASG,MALO,2CAAH,sDAQTC,EAAY,mCAAG,WAAM7B,GAAN,yFACLmB,MAAM,GAAD,OACrBH,EADqB,iBACJhB,EADI,4BACuBiB,IAFvB,cACpBG,EADoB,gBAIHA,EAAOC,OAJJ,cAIpBI,EAJoB,OAK1BK,QAAQC,IAAIN,GALc,kBAMnBA,EAASF,SANU,2CAAH,qD,sBChCzB,SAASS,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAOC,GAEP,YADAP,EAAOO,EAET,CAEIF,EAAKG,KACPT,EAAQO,GAERG,QAAQV,QAAQO,GAAOI,KAAKT,EAAOC,EAEvC,CAEe,SAASS,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIP,SAAQ,SAAUV,EAASC,GACpC,IAAIF,EAAMc,EAAGK,MAAMJ,EAAME,GAEzB,SAASd,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,EAClE,CAEA,SAASJ,EAAOgB,GACdrB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASgB,EACnE,CAEAjB,OAAMkB,EACR,GACF,CACF,C","sources":["pages/Cast/Cast.jsx","service/movieAPI.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import { movieCast } from 'service/movieAPI';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nconst Cast = () => {\n  const [actors, setActors] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchMovies = async () => {\n      const data = await movieCast(movieId);\n      setActors([...data.slice(0, 10)]);\n    };\n    fetchMovies();\n  }, [movieId]);\n\n  const image = 'https://image.tmdb.org/t/p/w500';\n\n  return (\n    <ul>\n      {actors &&\n        actors.map(({ id, character, name, profile_path }) => {\n          return (\n            <li key={id}>\n              <img\n                style={{ width: '100px' }}\n                src={`${image}${profile_path}`}\n                alt=\"\"\n              />\n              <p>Actor: {name}</p>\n              <p>Character: {character}</p>\n            </li>\n          );\n        })}\n    </ul>\n  );\n};\n\nexport default Cast;\n","const BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '88dd01fe4db3764066bc9e293cf17684';\nconst TRENDING = 'trending/movie/day';\n\nexport const movieTrending = async () => {\n  const movies = await fetch(`${BASE_URL}${TRENDING}?api_key=${API_KEY}`);\n  const res = await movies.json();\n  return res.results;\n};\n\nexport const movieDetails = async movieId => {\n  const movies = await fetch(`${BASE_URL}movie/${movieId}?api_key=${API_KEY}`);\n  const response = await movies.json();\n  return response;\n};\n\nexport const movieSearch = async query => {\n  const movies = await fetch(\n    `${BASE_URL}search/movie?api_key=${API_KEY}&query=${query}`\n  );\n  const response = await movies.json();\n  return response.results;\n};\n\nexport const movieCast = async movieId => {\n  const movies = await fetch(\n    `${BASE_URL}movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n  const response = await movies.json();\n  return response.cast;\n};\n\nexport const movieReviews = async movieId => {\n  const movies = await fetch(\n    `${BASE_URL}movie/${movieId}/reviews?api_key=${API_KEY}`\n  );\n  const response = await movies.json();\n  console.log(response);\n  return response.results;\n};\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["useState","actors","setActors","movieId","useParams","useEffect","fetchMovies","movieCast","data","slice","map","id","character","name","profile_path","style","width","src","alt","BASE_URL","API_KEY","movieTrending","fetch","movies","json","res","results","movieDetails","response","movieSearch","query","cast","movieReviews","console","log","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}